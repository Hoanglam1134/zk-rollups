// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LayerTwoServiceClient is the client API for LayerTwoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LayerTwoServiceClient interface {
	// GetAccountStatus
	GetAccountsStatus(ctx context.Context, in *GetAccountsStatusRequest, opts ...grpc.CallOption) (*GetAccountsStatusResponse, error)
	// DebugDeposit
	DebugDeposit(ctx context.Context, in *DebugDepositRequest, opts ...grpc.CallOption) (*DebugDepositResponse, error)
	// DebugTransfer
	DebugTransfer(ctx context.Context, in *DebugTransferRequest, opts ...grpc.CallOption) (*DebugTransferResponse, error)
	DebugWithdraw(ctx context.Context, in *DebugWithdrawRequest, opts ...grpc.CallOption) (*DebugWithdrawResponse, error)
	DebugFullFlowDeposit(ctx context.Context, in *DebugFullFlowDepositRequest, opts ...grpc.CallOption) (*DebugFullFlowDepositResponse, error)
	DebugFullFlowTransfer(ctx context.Context, in *DebugFullFlowTransferRequest, opts ...grpc.CallOption) (*DebugFullFlowTransferResponse, error)
	DebugFullFlowWithdraw(ctx context.Context, in *DebugFullFlowWithdrawRequest, opts ...grpc.CallOption) (*DebugFullFlowWithdrawResponse, error)
}

type layerTwoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLayerTwoServiceClient(cc grpc.ClientConnInterface) LayerTwoServiceClient {
	return &layerTwoServiceClient{cc}
}

func (c *layerTwoServiceClient) GetAccountsStatus(ctx context.Context, in *GetAccountsStatusRequest, opts ...grpc.CallOption) (*GetAccountsStatusResponse, error) {
	out := new(GetAccountsStatusResponse)
	err := c.cc.Invoke(ctx, "/api.LayerTwoService/GetAccountsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layerTwoServiceClient) DebugDeposit(ctx context.Context, in *DebugDepositRequest, opts ...grpc.CallOption) (*DebugDepositResponse, error) {
	out := new(DebugDepositResponse)
	err := c.cc.Invoke(ctx, "/api.LayerTwoService/DebugDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layerTwoServiceClient) DebugTransfer(ctx context.Context, in *DebugTransferRequest, opts ...grpc.CallOption) (*DebugTransferResponse, error) {
	out := new(DebugTransferResponse)
	err := c.cc.Invoke(ctx, "/api.LayerTwoService/DebugTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layerTwoServiceClient) DebugWithdraw(ctx context.Context, in *DebugWithdrawRequest, opts ...grpc.CallOption) (*DebugWithdrawResponse, error) {
	out := new(DebugWithdrawResponse)
	err := c.cc.Invoke(ctx, "/api.LayerTwoService/DebugWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layerTwoServiceClient) DebugFullFlowDeposit(ctx context.Context, in *DebugFullFlowDepositRequest, opts ...grpc.CallOption) (*DebugFullFlowDepositResponse, error) {
	out := new(DebugFullFlowDepositResponse)
	err := c.cc.Invoke(ctx, "/api.LayerTwoService/DebugFullFlowDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layerTwoServiceClient) DebugFullFlowTransfer(ctx context.Context, in *DebugFullFlowTransferRequest, opts ...grpc.CallOption) (*DebugFullFlowTransferResponse, error) {
	out := new(DebugFullFlowTransferResponse)
	err := c.cc.Invoke(ctx, "/api.LayerTwoService/DebugFullFlowTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *layerTwoServiceClient) DebugFullFlowWithdraw(ctx context.Context, in *DebugFullFlowWithdrawRequest, opts ...grpc.CallOption) (*DebugFullFlowWithdrawResponse, error) {
	out := new(DebugFullFlowWithdrawResponse)
	err := c.cc.Invoke(ctx, "/api.LayerTwoService/DebugFullFlowWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LayerTwoServiceServer is the server API for LayerTwoService service.
// All implementations must embed UnimplementedLayerTwoServiceServer
// for forward compatibility
type LayerTwoServiceServer interface {
	// GetAccountStatus
	GetAccountsStatus(context.Context, *GetAccountsStatusRequest) (*GetAccountsStatusResponse, error)
	// DebugDeposit
	DebugDeposit(context.Context, *DebugDepositRequest) (*DebugDepositResponse, error)
	// DebugTransfer
	DebugTransfer(context.Context, *DebugTransferRequest) (*DebugTransferResponse, error)
	DebugWithdraw(context.Context, *DebugWithdrawRequest) (*DebugWithdrawResponse, error)
	DebugFullFlowDeposit(context.Context, *DebugFullFlowDepositRequest) (*DebugFullFlowDepositResponse, error)
	DebugFullFlowTransfer(context.Context, *DebugFullFlowTransferRequest) (*DebugFullFlowTransferResponse, error)
	DebugFullFlowWithdraw(context.Context, *DebugFullFlowWithdrawRequest) (*DebugFullFlowWithdrawResponse, error)
	mustEmbedUnimplementedLayerTwoServiceServer()
}

// UnimplementedLayerTwoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLayerTwoServiceServer struct {
}

func (UnimplementedLayerTwoServiceServer) GetAccountsStatus(context.Context, *GetAccountsStatusRequest) (*GetAccountsStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsStatus not implemented")
}
func (UnimplementedLayerTwoServiceServer) DebugDeposit(context.Context, *DebugDepositRequest) (*DebugDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugDeposit not implemented")
}
func (UnimplementedLayerTwoServiceServer) DebugTransfer(context.Context, *DebugTransferRequest) (*DebugTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugTransfer not implemented")
}
func (UnimplementedLayerTwoServiceServer) DebugWithdraw(context.Context, *DebugWithdrawRequest) (*DebugWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugWithdraw not implemented")
}
func (UnimplementedLayerTwoServiceServer) DebugFullFlowDeposit(context.Context, *DebugFullFlowDepositRequest) (*DebugFullFlowDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugFullFlowDeposit not implemented")
}
func (UnimplementedLayerTwoServiceServer) DebugFullFlowTransfer(context.Context, *DebugFullFlowTransferRequest) (*DebugFullFlowTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugFullFlowTransfer not implemented")
}
func (UnimplementedLayerTwoServiceServer) DebugFullFlowWithdraw(context.Context, *DebugFullFlowWithdrawRequest) (*DebugFullFlowWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DebugFullFlowWithdraw not implemented")
}
func (UnimplementedLayerTwoServiceServer) mustEmbedUnimplementedLayerTwoServiceServer() {}

// UnsafeLayerTwoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LayerTwoServiceServer will
// result in compilation errors.
type UnsafeLayerTwoServiceServer interface {
	mustEmbedUnimplementedLayerTwoServiceServer()
}

func RegisterLayerTwoServiceServer(s grpc.ServiceRegistrar, srv LayerTwoServiceServer) {
	s.RegisterService(&LayerTwoService_ServiceDesc, srv)
}

func _LayerTwoService_GetAccountsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerTwoServiceServer).GetAccountsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LayerTwoService/GetAccountsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerTwoServiceServer).GetAccountsStatus(ctx, req.(*GetAccountsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayerTwoService_DebugDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerTwoServiceServer).DebugDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LayerTwoService/DebugDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerTwoServiceServer).DebugDeposit(ctx, req.(*DebugDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayerTwoService_DebugTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerTwoServiceServer).DebugTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LayerTwoService/DebugTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerTwoServiceServer).DebugTransfer(ctx, req.(*DebugTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayerTwoService_DebugWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerTwoServiceServer).DebugWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LayerTwoService/DebugWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerTwoServiceServer).DebugWithdraw(ctx, req.(*DebugWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayerTwoService_DebugFullFlowDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugFullFlowDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerTwoServiceServer).DebugFullFlowDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LayerTwoService/DebugFullFlowDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerTwoServiceServer).DebugFullFlowDeposit(ctx, req.(*DebugFullFlowDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayerTwoService_DebugFullFlowTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugFullFlowTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerTwoServiceServer).DebugFullFlowTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LayerTwoService/DebugFullFlowTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerTwoServiceServer).DebugFullFlowTransfer(ctx, req.(*DebugFullFlowTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LayerTwoService_DebugFullFlowWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugFullFlowWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LayerTwoServiceServer).DebugFullFlowWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LayerTwoService/DebugFullFlowWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LayerTwoServiceServer).DebugFullFlowWithdraw(ctx, req.(*DebugFullFlowWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LayerTwoService_ServiceDesc is the grpc.ServiceDesc for LayerTwoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LayerTwoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.LayerTwoService",
	HandlerType: (*LayerTwoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccountsStatus",
			Handler:    _LayerTwoService_GetAccountsStatus_Handler,
		},
		{
			MethodName: "DebugDeposit",
			Handler:    _LayerTwoService_DebugDeposit_Handler,
		},
		{
			MethodName: "DebugTransfer",
			Handler:    _LayerTwoService_DebugTransfer_Handler,
		},
		{
			MethodName: "DebugWithdraw",
			Handler:    _LayerTwoService_DebugWithdraw_Handler,
		},
		{
			MethodName: "DebugFullFlowDeposit",
			Handler:    _LayerTwoService_DebugFullFlowDeposit_Handler,
		},
		{
			MethodName: "DebugFullFlowTransfer",
			Handler:    _LayerTwoService_DebugFullFlowTransfer_Handler,
		},
		{
			MethodName: "DebugFullFlowWithdraw",
			Handler:    _LayerTwoService_DebugFullFlowWithdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
