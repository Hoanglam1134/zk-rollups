package service

import (
	"errors"
	"fmt"
	"github.com/ethereum/go-ethereum/common"
	"log"
	"math/big"
	"os/exec"
	"strings"
	"testing"
	"zk-rollups/internal/models"
	"zk-rollups/utils"
)

func TestContract(t *testing.T) {
	// generate proof for register
	_, err := exec.LookPath("/bin/bash")
	if errors.Is(err, exec.ErrDot) {
		err = nil
	}
	if err != nil {
		fmt.Println("bash not found")
		log.Fatal(err)
	}
	cmd := exec.Command("/bin/bash", "/home/victus-15/Study/zk-rollups/circuits/deposit_register/run.sh")
	out, err := cmd.Output()
	if err != nil {
		fmt.Println("[Register] error generate proof")
		log.Fatal(err)
	}

	fmt.Println(string(out))
}

func TestConvertBigInt(t *testing.T) {
	//sample := "[\"0x0a663e1920fdc87ae7cb0da40c5d41c4e4c9cf2468f79e09968f4fddca2a6a59\", \"0x070078214006c0761f032ecfae5cd18d5694fb74025652aa5c34bb02622ef673\"],[[\"0x0ea1416d7af40f6117189ff06ac8f83524f5e75768e4e84ff5888ea59d0af846\", \"0x2ce1f167f1e7e1f65c24570b7a6b6013eef448671ca0aaac5a6f089ef37b1c03\"],[\"0x089deae48675b8e70d1d731f3b6b63f60ef080c5f09e33f9ee47b1ddf2fb09b6\", \"0x0bfb99c500b7b540268ead425812dec65669854b8b76ea4d906f7a940ef94925\"]],[\"0x0163a68cef90628b8ccace16893c1a02c8fec38e15e6f1eb0003d97106722e33\", \"0x2d688a84e42b8211dbbbf00c78e032b2362802e1c142574ffb30bba630c52b72\"],[\"0x0ddebd8e474b3280000000000000000000000000000000000000000000000000\",\"0x1474b796e38fac00000000000000000000000000000000000000000000000000\",\"0x20d15b1df398e800000000000000000000000000000000000000000000000000\",\"0x004ea3710e5c9fa0000000000000000000000000000000000000000000000000\"]"
	lists := []string{
		"0x0a663e1920fdc87ae7cb0da40c5d41c4e4c9cf2468f79e09968f4fddca2a6a59",
		"0x070078214006c0761f032ecfae5cd18d5694fb74025652aa5c34bb02622ef673",
		"0x0ea1416d7af40f6117189ff06ac8f83524f5e75768e4e84ff5888ea59d0af846",
		"0x2ce1f167f1e7e1f65c24570b7a6b6013eef448671ca0aaac5a6f089ef37b1c03",
		"0x089deae48675b8e70d1d731f3b6b63f60ef080c5f09e33f9ee47b1ddf2fb09b6",
		"0x0bfb99c500b7b540268ead425812dec65669854b8b76ea4d906f7a940ef94925",
		"0x0163a68cef90628b8ccace16893c1a02c8fec38e15e6f1eb0003d97106722e33",
		"0x2d688a84e42b8211dbbbf00c78e032b2362802e1c142574ffb30bba630c52b72",
		"0xddebd8e474b32800000000000000000000000000000000000000000000000000",
		"0x1474b796e38fac00000000000000000000000000000000000000000000000000",
		"0x20d15b1df398e800000000000000000000000000000000000000000000000000",
		"0x004ea3710e5c9fa0000000000000000000000000000000000000000000000000",
	}
	temps := make([]*big.Int, 0, len(lists))
	for _, s := range lists {
		s = strings.TrimPrefix(s, "0x")
		temp, ok := new(big.Int).SetString(s, 16)
		if !ok {
			fmt.Println("error")
		}
		temps = append(temps, temp)
	}
	for _, i := range temps {
		fmt.Println(i.String())
	}
}

func Test_circom(t *testing.T) {
	fromX, _ := new(big.Int).SetString("5451215013266201798993630159113865668198345275396592059690953387614851870301", 10)
	fromY, _ := new(big.Int).SetString("17268377986019949710228460528535182408284571957930894237618715310085191207235", 10)
	toX, _ := new(big.Int).SetString("5451215013266201798993630159113865668198345275396592059690953387614851870301", 10)
	toY, _ := new(big.Int).SetString("17268377986019949710228460528535182408284571957930894237618715310085191207235", 10)
	amount, _ := new(big.Int).SetString("2", 10)
	nonce, _ := new(big.Int).SetString("0", 10)
	r8x, _ := new(big.Int).SetString("19398006947313645890139963032187657393857889956125582661773094296098182686973", 10)
	r8y, _ := new(big.Int).SetString("4927616108881205065082795624506824256474294587447160807877034235875013766060", 10)
	s, _ := new(big.Int).SetString("197680582768201024885931970339957104946007428409921746221746261856441926315", 10)

	tx := models.Transaction{
		FromX:        fromX,
		FromY:        fromY,
		ToX:          toX,
		ToY:          toY,
		Amount:       amount,
		Nonce:        nonce,
		R8X:          r8x,
		R8Y:          r8y,
		S:            s,
		EcdsaAddress: common.Address{},
	}
	fmt.Println(tx.GetHash().String())
	valid := tx.VerifyTx()
	fmt.Println(valid)
}

func Test_mod(t *testing.T) {
	// mod between 2 big.Int
	// circom: 8912860987968352961715411707780777900319029486447499732107958024062250254336
	a, _ := new(big.Int).SetString("8912860987968352188705007198182796601414871248650912689373731534720466882677", 10)
	b, _ := new(big.Int).SetString("21888242871839275222246405745257275088548364400416034343698204186575808495617", 10)
	c := new(big.Int).Mod(a, b)
	fmt.Println(c.String())
}
func Test_hash(t *testing.T) {
	emptyProof := []string{
		"900874785802902563431284098869516253257880530661551091336286492985583416122",
		"18279067695950923931780694213283340776147767794816260709262940858538001040141",
		"1330005926393843105383439305489047580207396614092548444145892094306829969947",
		"5898755207758162788573538170369894980615929765122925590742816663515363410246",
		"21085382264118145300711525558397152713694144707451312452204266184858981942728",
		"415988345246705407411286089535406326232056391505629926444273382638964443831",
		"21091416864653949885076982366447492246202815813380463164598922803533279904013",
		"16959100380875170823283054428518690854372649812500065475365525073088034587834",
		"12899792043445421187807408401756294031855582550461974898928524258960585269141",
		"6336925067438789274904340693933120466252047678819867694049987887226633725534",
		"4908908391849116255729046104086755097627343288084655776379864858281161625707",
		"14912254718521785794533132013329647391127072370976167592416455059064425991007",
		"20146106863440695501458138644691091300071143911005438468730958044500575059863",
	}
	//proofPos := []int{1,1,1,1,1,1,1,1,1,1,1,1,1}
	hash0 := []string{
		"14843911057613007082281029454064469699531743164039819078745532611212713240400",
		"11828933311220378066461407206382022696506909092706609919195924920559542807142",
		"7650370168294994528719732250520041562842058192190249025026343106640956397915",
		"357405584973099527007975117509058784516601000887932842566292070452853773928",
		"8200011773237011242364985633164387008294719209180991701071858040401300095634",
		"4923689769190406654133785357765721528821209493595395116462562287607874231100",
		"3083704855088695738654411793668839785198510512544904181352591716724735976272",
		"6687815588544399542687443925610938937859607720419996403912959790181175826432",
		"8286827666118801041295192450323752576066571696501065247466664373751857864733",
		"14660821484925133853226435484063711453074423547026006065234098220082114135482",
		"8221322725023633737139620136504657191794398473300308703661120142902958207382",
		"13634831292843588406339399435064980511052602662838421404081029799368617869241",
		"15223887864994241615791611964093384216198790188539251360197765877602650168863",
		"8084479250503918009107008992984332503832508687890286554363264642420089984192",
		"20464993561770278532764413369575957503086115885496206734518201755625824050222",
		"4988684068647299082350080212880211252960307133102834465027872526193553163313",
	}

	j := 13
	for _, p := range emptyProof {
		a, _ := new(big.Int).SetString(p, 10)
		b, _ := new(big.Int).SetString(hash0[j], 10)
		res := utils.MultiMiMC7BigInt(a, b)
		fmt.Println(res.String())
		j--
	}
}
